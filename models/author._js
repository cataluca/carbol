// Generated by CoffeeScript 1.6.3
/*
streamline.options = { "callback": "__" };
*/


(function() {
  var ObjectId, Schema, authorSchema, conf, f, model, mongoose, test_add_author, test_get_author, test_remove_author;

  mongoose = require('mongoose');

  conf = require('../conf');

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  model = require("./index");

  authorSchema = new Schema({
    name: String,
    surname: String,
    __cascade: Boolean
  });

  authorSchema.virtual("fullname").get(function() {
    return "" + this.name + " " + this.surname;
  });

  authorSchema.pre("save", function(next) {
    console.log("salvataggio...", this);
    if (!this.name) {
      return next(new Error("Name is not defined"));
    } else {
      return next();
    }
  });

  authorSchema.pre("remove", true, function(next, done) {
    var Post;
    console.log("pre-remove", this);
    next();
    if (this.__cascade) {
      Post = require("./post").Post;
      return model.cascade_delete({
        Model: Post,
        query: {
          author: this._id
        },
        done: done
      });
    } else {
      return done();
    }
  });

  exports.Author = mongoose.model('Author', authorSchema);

  test_add_author = function(_arg, __) {
    var author;
    _arg;
    author = new exports.Author({
      name: "Fabio",
      surname: "Castaldo"
    });
    author.save(__);
    console.log(author);
    return mongoose.connection.close();
  };

  test_get_author = function(_arg, __) {
    var author;
    _arg;
    mongoose.connect(conf.mongo_uri);
    author = exports.Author.findOne({
      _id: "5229d9dd3f1445e174000001"
    }, __);
    console.log(author);
    console.log(author.fullname);
    author.name = "Fabio";
    author.save(__);
    return mongoose.connection.close();
  };

  test_remove_author = function(_arg, __) {
    var post;
    _arg;
    mongoose.connect(conf.mongo_uri);
    post = exports.Author.findOne({
      _id: "5229d9dd3f1445e174000001"
    }, __);
    console.log(post);
    post.__cascade = true;
    post.remove(__);
    return mongoose.connection.close();
  };

  if (!module.parent) {
    if (process.argv.length >= 3) {
      f = process.argv[2];
      f = eval(f);
      f({}, __);
    }
  }

}).call(this);
