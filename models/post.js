/*** Generated by streamline 0.4.11 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__trap=__rt.__trap; (function main(__) { var __this = this; var __frame = { name: "main", line: 1 }; return __func(__, this, arguments, main, 0, __frame, function __$main() {













































































































    return (function __1(__) { var ObjectId, Schema, conf, f, mongoose, postSchema, test_add_post, test_find_and_modify_post, test_remove_post; mongoose = require("mongoose"); conf = require("../conf"); Schema = mongoose.Schema; ObjectId = Schema.ObjectId; postSchema = new Schema({ title: String, author: { type: ObjectId, ref: "Author" }, body: String, comments: [{ body: String, date: Date },], date: { type: Date, default: Date.now }, hidden: Boolean, meta: { votes: Number, favs: Number } }); postSchema.path("title").validate(function(value) { return value; }, "Title is not defined"); postSchema.pre("save", function(next) { return next(); }); postSchema.pre("remove", function(next) { console.log("pre-remove", this); return next(); }); exports.Post = mongoose.model("Post", postSchema); test_add_post = function test_add_post__1(_arg, __) { var Author, author, post; var __frame = { name: "test_add_post__1", line: 57 }; return __func(__, this, arguments, test_add_post__1, 1, __frame, function __$test_add_post__1() { _arg; mongoose.connect(conf.mongo_uri); Author = require("./author").Author; return Author.findOne({ _id: "521758c9d5b3c76944000001" }, __cb(__, __frame, 5, 13, function ___(__0, __1) { author = __1; post = new exports.Post({ title: "Prova", author: author, body: "Corpo messaggio", comments: [], hidden: false }); return post.save(__cb(__, __frame, 15, 4, function __$test_add_post__1() { console.log(post); return __(null, mongoose.connection.close()); }, true)); }, true)); }); }; test_find_and_modify_post = function test_find_and_modify_post__2(_arg, __) { var post; var __frame = { name: "test_find_and_modify_post__2", line: 77 }; return __func(__, this, arguments, test_find_and_modify_post__2, 1, __frame, function __$test_find_and_modify_post__2() { _arg; mongoose.connect(conf.mongo_uri); return exports.Post.findOne({ _id: "52175a19510a242346000002" }).populate("author").exec(__cb(__, __frame, 6, 11, function ___(__0, __1) { post = __1; console.log(post); post.title = "Nuovo Titolo"; return post.save(__cb(__, __frame, 9, 4, function __$test_find_and_modify_post__2() { console.log(post); return __(null, mongoose.connection.close()); }, true)); }, true)); }); }; test_remove_post = function test_remove_post__3(_arg, __) { var post; var __frame = { name: "test_remove_post__3", line: 91 }; return __func(__, this, arguments, test_remove_post__3, 1, __frame, function __$test_remove_post__3() { _arg; mongoose.connect(conf.mongo_uri); return exports.Post.findOne({ _id: "52175243290b101b38000002" }, __cb(__, __frame, 4, 11, function ___(__0, __1) { post = __1; return post.remove(__cb(__, __frame, 7, 4, function __$test_remove_post__3() { console.log(post); return __(null, mongoose.connection.close()); }, true)); }, true)); }); }; return (function __$__1(__then) { if (!module.parent) { return (function __$__1(__then) { if ((process.argv.length >= 3)) { f = process.argv[2]; f = eval(f); return f({ }, __cb(__, __frame, 100, 6, __then, true)); } else { __then(); } ; })(__then); } else { __then(); } ; })(function __$__1() { __(); }); })(__cb(__, __frame, 110, 0, function __$main() { __(); }, true)); });}).call(this, __trap);