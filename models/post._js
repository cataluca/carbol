// Generated by CoffeeScript 1.6.3
/*
streamline.options = { "callback": "__" };
*/


(function() {
  var ObjectId, Schema, conf, f, mongoose, postSchema, test_add_post, test_find_and_modify_post, test_remove_post;

  mongoose = require('mongoose');

  conf = require('../conf');

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  postSchema = new Schema({
    title: String,
    author: {
      type: ObjectId,
      ref: "Author"
    },
    body: String,
    comments: [
      {
        body: String,
        date: Date
      }
    ],
    date: {
      type: Date,
      "default": Date.now
    },
    hidden: Boolean,
    meta: {
      votes: Number,
      favs: Number
    }
  });

  postSchema.path("title").validate(function(value) {
    return value;
  }, "Title is not defined");

  postSchema.pre("save", function(next) {
    return next();
  });

  postSchema.pre("remove", function(next) {
    console.log("pre-remove", this);
    return next();
  });

  exports.Post = mongoose.model('Post', postSchema);

  test_add_post = function(_arg, __) {
    var Author, author, post;
    _arg;
    mongoose.connect(conf.mongo_uri);
    Author = require("./author").Author;
    author = Author.findOne({
      name: "Fabio"
    }, __);
    post = new exports.Post({
      title: "Prova",
      author: author,
      body: "Corpo messaggio",
      comments: [],
      hidden: false
    });
    post.save(__);
    console.log(post);
    return mongoose.connection.close();
  };

  test_find_and_modify_post = function(_arg, __) {
    var Author, post;
    _arg;
    mongoose.connect(conf.mongo_uri);
    Author = require("./author").Author;
    post = exports.Post.findOne({
      _id: "5229df3602e5e9e878000002"
    }).populate("author").exec(__);
    console.log(post);
    return mongoose.connection.close();
  };

  test_remove_post = function(_arg, __) {
    var post;
    _arg;
    mongoose.connect(conf.mongo_uri);
    post = exports.Post.findOne({
      _id: "52175243290b101b38000002"
    }, __);
    post.remove(__);
    console.log(post);
    return mongoose.connection.close();
  };

  if (!module.parent) {
    if (process.argv.length >= 3) {
      f = process.argv[2];
      f = eval(f);
      f({}, __);
    }
  }

}).call(this);
